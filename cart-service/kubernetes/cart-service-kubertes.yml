server:
  port: 8082

spring:
  application:
    name: cart-service
  profiles:
    active: kubernetes
  config:
    import: configserver:http://config-server.ecommerce.svc.cluster.local:8888
  datasource:
    url: jdbc:mysql://mysql-service.ecommerce.svc.cluster.local:3306/ecommerce_cart?createDatabaseIfNotExist=true&useSSL=false&serverTimezone=UTC&readOnly=false
    username: ${mysql.username:tiendoan}
    password: ${mysql.password} # Fetched from Kubernetes Secret
    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    hibernate:
      ddl-auto: update
    open-in-view: true
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
  data:
    redis:
      host: ${redis.host:redis-service.ecommerce.svc.cluster.local}
      port: ${redis.port:6379}
      database: 1
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0
        shutdown-timeout: 100ms
  kafka:
    bootstrap-servers: kafka-service.ecommerce.svc.cluster.local:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    consumer:
      group-id: cart-service-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      enable-auto-commit: false
      properties:
        spring.json.trusted.packages: "com.eazybytes.event.model"
  cloud:
    kubernetes:
      discovery:
        enabled: true
        all-namespaces: false
        namespace: ecommerce
    discovery:
      enabled: false
    openfeign:
      client:
        config:
          default:
            connectTimeout: 5000
            readTimeout: 5000

# Disable Eureka
eureka:
  client:
    enabled: false

kafka:
  topics:
    checkout:
      initiated: checkout-initiated
      failed: checkout-failed
    order:
      completed: order-completed
      failed: order-failed
    cart:
      cleared: cart-cleared
      clearfailed: cart-clear-failed

# Management endpoints for health checks
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,refresh
  endpoint:
    health:
      probes:
        enabled: true
      show-details: always
    refresh:
      enabled: true
  health:
    readiness-state:
      enabled: true
    liveness-state:
      enabled: true

# Resilience4j Configuration
resilience4j:
  circuitbreaker:
    instances:
      inventoryService:
        slidingWindowSize: 10
        failureRateThreshold: 50
        waitDurationInOpenState: 10000
        permittedNumberOfCallsInHalfOpenState: 3
        registerHealthIndicator: true
  retry:
    instances:
      inventoryService:
        maxAttempts: 3
        waitDuration: 1000
        retryExceptions:
          - org.springframework.web.client.RestClientException
          - java.io.IOException
        ignoreExceptions:
          - java.lang.IllegalArgumentException

# Logging configuration
logging:
  level:
    com.eazybytes: DEBUG
    org.springframework.kafka: INFO
    com.netflix.eureka: OFF
    com.netflix.discovery: OFF
    org.springframework.cloud.kubernetes: DEBUG

springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
    operationsSorter: method
