server:
  port: 8100

spring:
  application:
    name: inventory-service
  profiles:
    active: kubernetes
  config:
    import: configserver:http://config-server.ecommerce.svc.cluster.local:8888
  datasource:
    url: jdbc:mysql://mysql-service.ecommerce.svc.cluster.local:3306/ecommerce_inventory?createDatabaseIfNotExist=true&useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
    username: ${mysql.username:tiendoan}
    password: ${mysql.password} # Fetched from Kubernetes Secret
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      connection-timeout: 20000
      maximum-pool-size: 15
      minimum-idle: 8
      idle-timeout: 300000
      max-lifetime: 1200000
      auto-commit: true
      connection-test-query: SELECT 1
      transaction-isolation: TRANSACTION_READ_COMMITTED
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        dialect: org.hibernate.dialect.MySQLDialect
        connection:
          provider_disables_autocommit: false
        jdbc:
          batch_size: 10
          batch_versioned_data: true
        order_inserts: true
        order_updates: true
        transaction:
          jta:
            platform: org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform
  jackson:
    serialization:
      write-dates-as-timestamps: false
    date-format: yyyy-MM-dd HH:mm:ss
    time-zone: UTC
    deserialization:
      fail-on-unknown-properties: false
  mvc:
    async:
      request-timeout: 300000
  kafka:
    bootstrap-servers: kafka-service.ecommerce.svc.cluster.local:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        acks: all
        retries: 3
    consumer:
      group-id: inventory-service-group
      auto-offset-reset: earliest
      enable-auto-commit: false
      key-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      properties:
        spring.deserializer.key.delegate.class: org.apache.kafka.common.serialization.StringDeserializer
        spring.deserializer.value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer
        spring.json.trusted.packages: "*"
        spring.json.use.type.headers: false
        spring.json.value.default.type: "java.util.HashMap"
        spring.json.remove.type.headers: false
        spring.json.deserialization.fail.on.unknown.properties: false
        spring.json.type.mapping: >-
          reserve-inventory-request:com.eazybytes.dto.ReserveInventoryRequest,
          confirm-inventory-reservation:com.eazybytes.dto.ConfirmInventoryReservationRequest,
          cancel-inventory-reservation:com.eazybytes.dto.CancelInventoryReservationRequest,
          com.eazybytes.event.model.ReserveInventoryRequest:com.eazybytes.dto.ReserveInventoryRequest,
          com.eazybytes.event.model.ConfirmInventoryReservationRequest:com.eazybytes.dto.ConfirmInventoryReservationRequest,
          com.eazybytes.event.model.CancelInventoryReservationRequest:com.eazybytes.dto.CancelInventoryReservationRequest,
          CancelInventoryReservationRequest:com.eazybytes.dto.CancelInventoryReservationRequest
  cloud:
    kubernetes:
      discovery:
        enabled: true
        all-namespaces: false
        namespace: ecommerce
    discovery:
      enabled: false

# Disable Eureka
eureka:
  client:
    enabled: false

kafka:
  topics:
    inventory:
      reserved: inventory-reserved
      reservation-failed: inventory-reservation-failed
      confirmed: inventory-confirmed
    reserve-inventory-request: reserve-inventory-request
    confirm-inventory-reservation: confirm-inventory-reservation
    cancel-inventory-reservation: cancel-inventory-reservation
    checkout:
      failed: checkout-failed

# Management endpoints for health checks
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,refresh
  endpoint:
    health:
      probes:
        enabled: true
      show-details: always
    refresh:
      enabled: true
  health:
    readiness-state:
      enabled: true
    liveness-state:
      enabled: true

# Logging configuration
logging:
  level:
    com.eazybytes: DEBUG
    org.springframework.kafka: INFO
    com.netflix.eureka: OFF
    com.netflix.discovery: OFF
    org.springframework.cloud.kubernetes: DEBUG

springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
    operationsSorter: method

# Inventory Service specific configuration
inventory:
  notification:
    low-stock-threshold: 5
    enable-email-alert: false
  metrics:
    enable: true
