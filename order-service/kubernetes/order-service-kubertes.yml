server:
  port: 8084

spring:
  application:
    name: order-service
  profiles:
    active: kubernetes
  config:
    import: configserver:http://config-server.ecommerce.svc.cluster.local:8888
  datasource:
    url: jdbc:mysql://mysql-service.ecommerce.svc.cluster.local:3306/ecommerce_order?createDatabaseIfNotExist=true&useSSL=false&serverTimezone=UTC
    username: ${mysql.username:tiendoan}
    password: ${mysql.password} # Fetched from Kubernetes Secret
    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
  kafka:
    bootstrap-servers: kafka-service.ecommerce.svc.cluster.local:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    consumer:
      group-id: order-service-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "com.eazybytes.event.model"
        spring.json.type.mapping: >-
          checkout-initiated:com.eazybytes.event.model.CheckoutInitiatedEvent,
          checkout-failed:com.eazybytes.event.model.CheckoutFailedEvent,
          inventory-reserved:com.eazybytes.event.model.InventoryReservedEvent,
          inventory-reservation-failed:com.eazybytes.event.model.InventoryReservationFailedEvent,
          payment-succeeded:com.eazybytes.event.model.PaymentSucceededEvent,
          payment-failed:com.eazybytes.event.model.PaymentFailedEvent,
          order-completed:com.eazybytes.event.model.OrderCompletedEvent
  cloud:
    kubernetes:
      discovery:
        enabled: true
        all-namespaces: false
        namespace: ecommerce
    discovery:
      enabled: false

# Disable Eureka
eureka:
  client:
    enabled: false

kafka:
  topics:
    checkout:
      initiated: checkout-initiated
      failed: checkout-failed
    order:
      completed: order-completed
      failed: order-failed
    inventory:
      reserved: inventory-reserved
      reservation-failed: inventory-reservation-failed
    payment:
      succeeded: payment-succeeded
      failed: payment-failed
    reserve-inventory-request: reserve-inventory-request
    process-payment-request: process-payment-request
    confirm-inventory-reservation: confirm-inventory-reservation
    cancel-inventory-reservation: cancel-inventory-reservation

# Management endpoints for health checks
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,refresh
  endpoint:
    health:
      probes:
        enabled: true
      show-details: always
    refresh:
      enabled: true
  health:
    readiness-state:
      enabled: true
    liveness-state:
      enabled: true

# Logging configuration
logging:
  level:
    root: INFO
    com.eazybytes: INFO
    org.springframework.kafka: INFO
    org.apache.kafka: INFO
    org.springframework.kafka.support.serializer: INFO
    com.netflix.eureka: OFF
    com.netflix.discovery: OFF
    org.springframework.cloud.kubernetes: DEBUG
